Q21 - Most Expensive And Cheapest Wine With Ties

https://platform.stratascratch.com/coding/2147-most-expensive-and-cheapest-wine-with-ties?code_type=1

# Import your libraries
import pandas as pd

# Start writing code


df1 = winemag_pd.loc[:,["region_1","variety","price"]].rename(columns={"region_1":"region"})
df2 = winemag_pd.loc[:,["region_2","variety","price"]].rename(columns={"region_2":"region"})

df = pd.concat([df1,df2],axis=0)
df["exp_rank"] = df.groupby("region")["price"].rank(ascending=False,method='dense')
df["chp_rank"] = df.groupby("region")["price"].rank(method='dense')

df_exp = df.loc[df["exp_rank"]==1][:]
df_chp = df.loc[df["chp_rank"]==1][:]

final_df = df_exp.merge(df_chp, left_on=["region","exp_rank"],right_on=["region","chp_rank"], how="inner")
final_df.drop_duplicates(inplace=True)
final_df.loc[:,["region","variety_x","variety_y"]]


------------------------------------------------------------------------------------------------------------
Postgres Solution

WITH combined_region AS(
(SELECT
    DISTINCT region_1 AS region,
    variety,
    price
FROM winemag_pd
WHERE price IS NOT NULL AND region_1 IS NOT NULL)
UNION ALL
(SELECT
    DISTINCT region_2 AS region,
    variety,
    price
FROM winemag_pd
WHERE price IS NOT NULL AND region_2 IS NOT NULL)),
ranked_cte AS (SELECT
    region,
    variety,
    price,
    DENSE_RANK() OVER(PARTITION BY region ORDER BY price DESC) as expensive_rank,
    DENSE_RANK() OVER(PARTITION BY region ORDER BY price) as cheapest_rank
FROM combined_region
)
SELECT
    DISTINCT t1.region,
    t1.variety AS expensive_variety,
    t2.variety AS cheapest_variety
FROM ranked_cte t1 JOIN ranked_cte t2
ON t1.region = t2.region AND t1.expensive_rank = t2.cheapest_rank
WHERE t1.expensive_rank = 1 AND t2.cheapest_rank = 1
